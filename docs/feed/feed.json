{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Recompiled",
	"language": "en",
	"home_page_url": "https://www.recompiled.dev/",
	"feed_url": "https://www.recompiled.dev/feed/feed.json",
	"description": "I write about compilers and JavaScript",
	"author": {
		"name": "Sathya Gunasekran",
		"url": ""
	},
	"items": [
		{
			"id": "https://www.recompiled.dev/blog/ssa/",
			"url": "https://www.recompiled.dev/blog/ssa/",
			"title": "Compiler Theory and Reactivity",
			"content_html": "<div class=\"message-box\">\n\t<p><em>If you're wondering what the React compiler is, I recommend reading our recent <a href=\"https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024#react-compiler\">update post</a> for some background. You don't need to understand everything in this post to use the compiler. So, don't worry if some parts are unclear.</em></p>\n</div>\n<p>The React compiler implements numerous traditional compiler transformations,\nthat are generally not accessible without having some background in compiler\ntheory. In this post, I'll try to provide a more accessible explanation of a compiler pass called Static Single\nAssignment form (SSA) using examples.</p>\n<p>Consider this simple React component:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can easily memoize it like this:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">useMemoCache</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> t0<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> colours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tt0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> colours<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t0<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tt0 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> t0<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The compiler can track the <code>styles</code> object being created and passed down as props.</p>\n<div class=\"message-box\">\n\t<p><em>Don't worry too much about the useMemoCache hook, it's an internal API used by the compiler to cache values. Think of `$` as an array.</em></p>\n  <p><em>The React Compiler can memoize JSX too, but I'm leaving it out in this post for brevity.</em></p>\n</div>\n<p>Now, let's say you want to refactor the styles based on a condition.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> colours<span class=\"token punctuation\">,</span> hover<span class=\"token punctuation\">,</span> hoverColours <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> styles<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Memoizing the <code> styles</code> object becomes a bit more challenging for the compiler\nbecause it's no longer a single statement. It's spread across several\nstatements, and there's control flow involved -- styles is created in both the\n<code>if</code> and <code>else</code> block.</p>\n<p>The compiler can still track styles creation across both blocks and memoize it like this:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">useMemoCache</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> hover<span class=\"token punctuation\">,</span> colours<span class=\"token punctuation\">,</span> hoverColours <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> styles<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> hover <span class=\"token operator\">||</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> colours <span class=\"token operator\">||</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> hoverColours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hover<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> colours<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hoverColours<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This works, but it's not ideal because we'd invalidate the memoized value if any of <code>hover</code>, <code>colours</code> or <code>hoverColours</code> changes. It's too <em>coarse grained</em>. Can we do better?</p>\n<h3 id=\"track-values-not-variables\" tabindex=\"-1\">Track values, not variables <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/ssa/\">#</a></h3>\n<p>One core intuition is that we'd memoize the values in the <code>if</code> block separately from the <code>else</code> block. They are separate <em>values</em> (separate <em>objects</em>), just being referenced by the same variable identifier (<code>styles</code>).</p>\n<p>Consider our previously example, but slightly modified to track the value separately by giving them different identifiers:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> styles<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// &lt;-- separate value</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- separate value</span>\n<span class=\"token punctuation\">}</span>\nstyles <span class=\"token operator\">=</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>t0 or t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now, it's pretty clear that we can memoize <code>t0</code> and <code>t1</code> separately. You've also realized that we need to choose between <code>t0</code> and <code>t1</code> and assign it correctly to <code>styles</code>, but let's ignore that for now.</p>\n<p>The compiler can memoize the values in their respective blocks:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> colours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tt0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\tcolours<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> colours<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t0<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tt0 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> hoverColours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tt1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hoverColours<span class=\"token punctuation\">;</span>\n\t\t$<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tt1 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nstyles <span class=\"token operator\">=</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>t0 or t1<span class=\"token punctuation\">)</span></code></pre>\n<p>This is more <em>fine grained</em> than the previous example.</p>\n<h3 id=\"where-s-the-complexity\" tabindex=\"-1\">Where's the complexity? <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/ssa/\">#</a></h3>\n<p>But, wait, we're just memoizing a value in the scope it was created, what's so hard about it?</p>\n<p>Well, let's consider another example:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> colours<span class=\"token punctuation\">,</span> hover<span class=\"token punctuation\">,</span> hoverColours <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> styles<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstyles<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\"large\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- modifying styles object</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Item styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In the above example, we modify the <code>styles</code> object after the <code>if-else</code> block by\nadding a new property named <code>height</code>. It's no longer safe to memoize the values\ninside the <code>if</code>-block and <code>else</code>-block separately.</p>\n<p>We can't modify a value after it's memoized. Not because it's sub-optimal performance-wise, but because it leads to incorrect behavior during re-rendering. Take a minute to think about how this behavior can manifest in practice.</p>\n<p>We need a way to track the values as they <em>flow</em>, not just simply memoize it in the scope they are created.</p>\n<div class=\"message-box\">\n <p><em>One could argue that you shouldn't be writing code like this. But, local mutations are very natural in JavaScript and there's plenty of React code written like this that we need to compile efficiently.</em></p>\n</div>\n<h3 id=\"track-the-flow\" tabindex=\"-1\">Track the flow <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/ssa/\">#</a></h3>\n<p>Remember the &quot;<code>choose</code>&quot; function, we ignored earlier? This lets the compiler track the values as they flow across if-else block!</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colours <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nstyles <span class=\"token operator\">=</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>t0 or t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- tracks values after control flow</span>\nstyles<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">'large'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now, the code (or to be precise, the compiler's <a href=\"https://en.wikipedia.org/wiki/Intermediate_representation\">intermediate representation</a>) tells the compiler that <code>styles</code> is either <code>t0</code> or <code>t1</code> and modifying <code>styles</code> is equivalent to modifying the values <code>t0</code> and <code>t1</code>.</p>\n<p>The compiler can now infer that the <code>styles</code> can only be memoized at a coarser level like this:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> hover <span class=\"token operator\">||</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> colours <span class=\"token operator\">||</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> hoverColours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hover<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\tcolours<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tstyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">colours</span><span class=\"token operator\">:</span> hoverColours<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstyles<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\"large\"</span><span class=\"token punctuation\">;</span>\n\t$<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hover<span class=\"token punctuation\">;</span>\n\t$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> colours<span class=\"token punctuation\">;</span>\n\t$<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hoverColours<span class=\"token punctuation\">;</span>\n\t$<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\tstyles <span class=\"token operator\">=</span> $<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"compiler-theory\" tabindex=\"-1\">Compiler theory <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/ssa/\">#</a></h3>\n<p>To recap, we've talked about tracking values separately with temporary identifiers and tracking the values across control flow with a &quot;choose&quot; function.</p>\n<p>Interestingly, a classical compiler transformation called <a href=\"https://en.wikipedia.org/wiki/Static_single-assignment_form\">Static single-assignment form</a> (SSA) does exactly this! Tracking new values and re-assignments by creating a new temporary value is the core part of the SSA transform. The &quot;<em>choose</em>&quot; function we talked about earlier is simply the &quot;<em>phi</em>&quot; (Φ) function defined in the SSA form.</p>\n<p>The exact SSA transformation that the React compiler uses is from the excellent <a href=\"https://c9x.me/compile/bib/braun13cc.pdf\">Simple and Efficient Construction of Static Single\nAssignment Form</a> paper.</p>\n<p>If you're curious to read more about compiler theory in the React compiler, take\na look at the <a href=\"https://www.recompiled.dev/tags/forget/\">other tagged posts</a>.</p>\n",
			"date_published": "2024-02-22T16:45:37Z"
		}
		,
		{
			"id": "https://www.recompiled.dev/blog/alias-analysis/",
			"url": "https://www.recompiled.dev/blog/alias-analysis/",
			"title": "Alias analysis in React Compiler",
			"content_html": "<div class=\"message-box\">\n\t<p><em>This post was originally published as a comment on the <a href=\"https://www.reddit.com/r/reactjs/\">r/reactjs</a> subreddit.</em></p>\n</div>\n<p>Forget supports almost all of the JavaScript language including all of it's idiosyncrasies. Forget is backwards compatible, so we have to work with existing code and not introduce new constraints -- this makes it a lot harder.</p>\n<div class=\"message-box\">\n\t<p><em><a href=\"https://react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-optimizing-compiler\">Forget</a> was the code name for the React Compiler.</em></p>\n</div>\n<p>One concrete example that looks simple enough but is actually really tricky to get right is aliasing, consider this example:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Foo x<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This seems simple enough to memoize with a compiler, the output should be something like this:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Foo x<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The entire computation of <code>x</code> is wrapped in a <code>useMemo</code> and cached. Simple enough.</p>\n<p>What happens if you alias <code>x</code> to some other variable?</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\ty<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Foo x<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, it's no longer enough to simply memoize the computation of x separately like we did previously:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// incorrect</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Foo x<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"memoization-must-be-correct\" tabindex=\"-1\">Memoization must be correct <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/alias-analysis/\">#</a></h3>\n<p>Note that the second example with the two memos is incorrect not because it's\nsuboptimal, but because it is logically incorrect. If you re-render the component with the same <code>a</code> but different <code>b</code>, then <code>x</code> will be <code>[a,b,b]</code> not <code>[a, b]</code> as you might expect, leading to bugs.</p>\n<p>This is why it's all or nothing -- either we compile this correctly or skip compiling this component entirely.</p>\n<p>If there are too many bailouts then Forget is not very useful, so it's a careful balance that we're trying to get right by experimenting internally at Meta with various projects.</p>\n<p>The correct way to memoize this is to group the computation together:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Foo x<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This is already bit trickier than without aliasing, but this is still just straight line code. Imagine if we had control flow in between, or if this escapes to an object or some random function call? It gets much trickier. Forget can't simply bail out and refuse to compile this case as we want to be backwards compatible.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Alias_analysis\">Alias analysis</a> on it's own is a\nhuge topic in compiler analysis. There's several other bits of compiler analysis\nlike this in Forget to make it work with vanilla JavaScript.</p>\n",
			"date_published": "2024-01-22T11:45:30Z"
		}
		,
		{
			"id": "https://www.recompiled.dev/blog/deopt/",
			"url": "https://www.recompiled.dev/blog/deopt/",
			"title": "Side effecting a deopt",
			"content_html": "<p>All popular JavaScript engines ship with optimising compilers (often, several\noptimising compilers). As a consequence of <em>speculatively</em> optimising a\nJavaScript function, some of these speculations might get invalidated causing a\nJavaScript function to be de-optimised back to (potentially) slower code.</p>\n<p>I had an interesting chat with a <a href=\"https://twitter.com/zmofei\">colleague</a> about the curious case of functions\ndeoptimising <em>without</em> being invoked. While prepping for a <a href=\"https://www.reactindia.io/speakers/sathya-gunasekaran\">talk</a>, I got sidetracked and wrote this post.</p>\n<h2 id=\"the-playground\" tabindex=\"-1\">The playground <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/deopt/\">#</a></h2>\n<p>Let's look at a simple <code>load</code> function that loads a known property from an object and returns it.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, let's run this <code>load</code> in a loop to trigger our friendly optimising compilers.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10e6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsum <span class=\"token operator\">+=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise `load`</span></code></pre>\n<p>Sure enough, v8 spews logging to confirm.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">❯ ~/.jsvu/v8-debug --trace-opt test.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> load\n<span class=\"token punctuation\">[</span>marking <span class=\"token operator\">&lt;</span>JSFunction load <span class=\"token keyword\">for</span> optimization to MAGLEV<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>compiling method <span class=\"token operator\">&lt;</span>JSFunction load<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target MAGLEV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>completed compiling <span class=\"token operator\">&lt;</span>JSFunction load<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target MAGLEV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre>\n<div class=\"message-box\">\n\t<p>v8 has <a href=\"https://blog.chromium.org/2023/06/how-chrome-achieved-high-scores-on.html\">several tiers of optimising compilers</a>, we're only looking at Maglev code here as Turbofan simply inlines <code>load</code> into <code>bench</code>, which isn't very interesting for our purposes.</p>\n</div>\n<h2 id=\"side-effecting-a-deopt\" tabindex=\"-1\">Side effecting a deopt <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/deopt/\">#</a></h2>\n<p>Now that we've got our playground setup, let's try to side effect a deopt by updating the value of <code>foo</code>:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise `load`</span>\n\nx<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// update value of 'foo'</span></code></pre>\n<p>Does this cause a deopt?</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">❯ ~/.jsvu/v8-debug --trace-deopt test.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> load\n<span class=\"token punctuation\">[</span>marking dependent code <span class=\"token operator\">&lt;</span>load<span class=\"token operator\">></span> <span class=\"token keyword\">for</span> deoptimization, reason: code dependencies<span class=\"token punctuation\">]</span></code></pre>\n<p>Yes!</p>\n<p>There's a fair amount of information online on how <a href=\"https://mathiasbynens.be/notes/shapes-ics\">hidden classes transitions</a> cause inline caches to become polymorphic, but this is different. We haven't changed the hidden class of <code>x</code> -- we've only updated the value of an existing property.</p>\n<p>Let's dig into the generated code to see what's happening here.</p>\n<pre class=\"language-armasm\" tabindex=\"0\"><code class=\"language-armasm\">...\n<span class=\"token number\">0x280008150</span>   <span class=\"token number\">130</span>  d2800040       movz x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span><span class=\"token number\">0x2</span>\n...</code></pre>\n<p>Looks like v8 has completely inlined the property load, and replaced it with the value of the property!</p>\n<div class=\"message-box\">\n\t<p>The value is <code>0x2</code>, and not <code>0x1</code> because it's been <a href=\"https://en.wikipedia.org/wiki/Tagged_pointer\">tagged</a>.</p>\n</div>\n<p>Alright, the deopt is starting to make sense because the optimised code simply returns the old value, not the new one. To protect against incorrect code, v8 has installed a dependency on the value of the <code>foo</code> property and triggers a deopt when the dependency is invalidated.</p>\n<p>Wouldn't it be better if v8 just loaded the property at runtime, rather than inlining the value of the property?</p>\n<p>Let's ask v8 to re-optimise <code>load</code>, after changing the value of <code>foo</code>.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise load</span>\n\nx<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"re-optimising load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The optimised code looks different now!</p>\n<pre class=\"language-armasm\" tabindex=\"0\"><code class=\"language-armasm\">...\n<span class=\"token number\">0x28001bfbc</span>    fc  <span class=\"token number\">580008e0</span>       ldr x0<span class=\"token punctuation\">,</span> pc<span class=\"token operator\">+</span><span class=\"token number\">284</span> <span class=\"token punctuation\">(</span>addr <span class=\"token number\">0x000000028001c0d8</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>   <span class=\"token number\">8</span>: LoadTaggedField<span class=\"token punctuation\">(</span><span class=\"token number\">0xc</span><span class=\"token punctuation\">,</span> decompressed<span class=\"token punctuation\">)</span>\n...</code></pre>\n<p>v8 has learnt that this value isn't a constant, and it's not a good idea to\ninline the value directly. Of course, inlining the value is strictly better\nbecause it's faster, but only when value doesn't change. Otherwise we're going\nto be stuck in a loop deoptimising and re-optimising.</p>\n<p>To double check, let's change the value once again.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise `load`</span>\n\nx<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// causes a deopt</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"re-optimising load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// another deopt?</span></code></pre>\n<p>Does this deopt now?</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">❯ ~/.jsvu/v8-debug --trace-deopt test.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> load\ndeoptimising load\n<span class=\"token punctuation\">[</span>marking dependent code <span class=\"token operator\">&lt;</span>load<span class=\"token operator\">></span> <span class=\"token keyword\">for</span> deoptimization, reason: code dependencies<span class=\"token punctuation\">]</span>\nre-optimising load</code></pre>\n<p>No! v8 simply loads the property at runtime.</p>\n<h2 id=\"expandos-considered-harmful\" tabindex=\"-1\">Expandos considered harmful <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/deopt/\">#</a></h2>\n<p>The general JS performance tip is to not change the shape of an object after it's constructed. This is pretty good advice, and it's mostly given in the context of not <a href=\"https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html\">polluting inline caches leading to poly/megamorphic caches</a>.</p>\n<p>There's another reason that's often overlooked. Changing a hidden class can cause deopts.</p>\n<p>Let's go back to our playground.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise `load`</span>\n\nx<span class=\"token punctuation\">.</span>__expando <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hidden class transition</span></code></pre>\n<p>Notice how after adding the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Expando\">expando</a>, we haven't invoked <code>load</code> nor have we changed the value of <code>foo</code>. Does this still cause a deopt?</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">❯ ~/.jsvu/v8-debug --trace-deopt test.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> load\n<span class=\"token punctuation\">[</span>marking dependent code <span class=\"token operator\">&lt;</span>load<span class=\"token operator\">></span> <span class=\"token keyword\">for</span> deoptimization, reason: code dependencies<span class=\"token punctuation\">]</span></code></pre>\n<p>Sure enough. This is because we've not only got a dependency on the value of the property, but also on the hidden class of the object.</p>\n<p>Let's look at slightly more <s>terrifying</s> baffling example.</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token function\">bench</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optimise `load`</span>\n\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ny<span class=\"token punctuation\">.</span>__expando <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></code></pre>\n<p>We've created a new object <code>y</code> that does not share anything with <code>x</code> (other than the builtin object prototype). We're not changing anything in the prototype of <code>y</code> or <code>x</code>, not updating <code>x</code>, and not calling <code>load</code>. There can't be any hidden class transitions in <code>x</code>, so this shouldn't deopt, right?</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">❯ ~/.jsvu/v8-debug --trace-deopt test.js <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> load\n<span class=\"token punctuation\">[</span>marking dependent code <span class=\"token operator\">&lt;</span>load<span class=\"token operator\">></span> <span class=\"token keyword\">for</span> deoptimization, reason: code dependencies<span class=\"token punctuation\">]</span></code></pre>\n<p>This still deopts!</p>\n<p>I <em>lied</em> when I said <code>x</code> and <code>y</code> don't share anything -- they share the same\n<a href=\"https://v8.dev/docs/hidden-classes\">hidden class</a>! Adding an expando on <code>y</code>\ncauses the shared hidden class to become unstable. The optimised code not only\ndepends on the value of the property and the hidden class, but also on the\n<em>stability</em> of the hidden class.</p>\n<p>But, why does the stability matter? The answer to any question in the v8 codebase is\nsimply -- <em>performance</em> -- stable maps help generate better, more optimised\ncode. Seth goes into more detail about stable maps\n<a href=\"https://www.mail-archive.com/v8-dev@googlegroups.com/msg160069.html\">here</a>, if\nyou're curious.</p>\n<h2 id=\"takeaways\" tabindex=\"-1\">Takeaways <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/deopt/\">#</a></h2>\n<p>There's a whole slew of <a href=\"https://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/compilation-dependencies.cc;l=22-41;drc=a6bdc8f2993883fc55eb9cb0945694299b056675\">other\nreasons</a>\nthat could side effect a deopt. v8 calls\nthis category of deopts as <em>lazy</em> deopts (as opposed to <em>eager deopts</em>).</p>\n<p>I don't think this is necessarily a reason to entirely stop using expandos and\nswitch to using WeakMaps -- WeakMaps come with other tradeoffs.</p>\n<p>The best JS performance tip is to write code that expresses intent clearly and let the engine optimise it.</p>\n",
			"date_published": "2023-09-19T13:33:37Z"
		}
		,
		{
			"id": "https://www.recompiled.dev/blog/intl/",
			"url": "https://www.recompiled.dev/blog/intl/",
			"title": "Internationalization APIs in V8",
			"content_html": "<div class=\"message-box\">\n\t<p><em>This post was originally published on the <a href=\"https://v8.dev/blog/intl\">V8 blog</a>.</em></p>\n</div>\n<p><a href=\"https://tc39.es/ecma402/\">The ECMAScript Internationalization API Specification</a> (ECMA-402, or <code>Intl</code>) provides key locale-specific functionality such as date formatting, number formatting, plural form selection, and collation. The Chrome V8 and Google Internationalization teams have been collaborating on adding features to V8’s ECMA-402 implementation, while cleaning up technical debt and improving performance and interoperability with other browsers.</p>\n<h2 id=\"underlying-architectural-improvements\" tabindex=\"-1\">Underlying architectural improvements <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h2>\n<p>Initially the ECMA-402 spec was implemented mostly in JavaScript using V8-extensions and lived outside the V8 codebase. Using the external Extension API meant that several of V8’s internally used APIs for type checking, lifetime management of external C++ objects and internal private data storage couldn’t be used. As part of improving startup performance, this implementation was later moved in to the V8 codebase to enable <a href=\"https://www.recompiled.dev/blog/custom-startup-snapshots\">snapshotting</a> of these builtins.</p>\n<p>V8 uses specialized <code>JSObject</code>s with custom <a href=\"https://mathiasbynens.be/notes/shapes-ics\">shapes (hidden classes)</a> to describe built-in JavaScript objects specified by ECMAScript (like <code>Promise</code>s, <code>Map</code>s, <code>Set</code>s, etc). With this approach, V8 can pre-allocate the required number of internal slots and generate fast accesses to these, rather than grow the object one property at a time leading to slower performance and worse memory usage.</p>\n<p>The <code>Intl</code> implementation was not modeled after such an architecture, as a consequence of the historic split. Instead, all the built-in JavaScript objects as specified by the Internationalization spec (like <code>NumberFormat</code>, <code>DateTimeFormat</code>) were generic <code>JSObject</code>s that had to transition through several property additions for their internal slots.</p>\n<p>Another artifact of not having a specialized <code>JSObject</code>s was that type checking was now more complex. The type information was stored under a private symbol and type-checked on both the JS and C++ side using expensive property access, rather than just looking up its shape.</p>\n<h3 id=\"modernizing-the-codebase\" tabindex=\"-1\">Modernizing the codebase <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h3>\n<p>With the current move away from writing self-hosted builtins in V8, it made sense to use this opportunity to modernize the ECMA402 implementation.</p>\n<h3 id=\"moving-away-from-self-hosted-js\" tabindex=\"-1\">Moving away from self-hosted JS <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h3>\n<p>Although self-hosting lends itself to concise and readable code, the frequent usage of slow runtime calls to access ICU APIs led to performance issues. As a result, a lot of ICU functionality was duplicated in JavaScript to reduce the number of such runtime calls.</p>\n<p>By rewriting the builtins in C++, it became much faster to access the ICU APIs as there is no runtime call overhead now.</p>\n<h3 id=\"improving-icu\" tabindex=\"-1\">Improving ICU <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h3>\n<p>ICU is a set of C/C++ libraries used by a large set of applications, including all the major JavaScript engines, for providing Unicode and globalization support. As part of switching <code>Intl</code> to ICU in V8’s implementation, we <a href=\"https://unicode-org.atlassian.net/browse/ICU-20140\">found</a> <a href=\"https://unicode-org.atlassian.net/browse/ICU-9562\">and</a> <a href=\"https://unicode-org.atlassian.net/browse/ICU-20098\">fixed</a> several ICU bugs.</p>\n<p>As part of implementing new proposals such as <a href=\"https://www.recompiled.dev/features/intl-relativetimeformat\"><code>Intl.RelativeTimeFormat</code></a>, <a href=\"https://www.recompiled.dev/features/intl-listformat\"><code>Intl.ListFormat</code></a> and <code>Intl.Locale</code>, we’ve extended ICU by adding <a href=\"https://unicode-org.atlassian.net/browse/ICU-13256\">several</a> <a href=\"https://unicode-org.atlassian.net/browse/ICU-20121\">new</a> <a href=\"https://unicode-org.atlassian.net/browse/ICU-20342\">APIs</a> to support these new ECMAScript proposals.</p>\n<p>All of these additions help other JavaScript engines implement these proposals quicker now, pushing the web forward! For example, development is in progress in Firefox on implementing several new <code>Intl</code> APIs based on our ICU work.</p>\n<h2 id=\"performance\" tabindex=\"-1\">Performance <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h2>\n<p>As a result of this work, we improved the performance of the Internationalization API by optimizing several fast paths and caching the initialization of the various <code>Intl</code> objects and the <code>toLocaleString</code> methods on <code>Number.prototype</code>, <code>Date.prototype</code>, and <code>String.prototype</code>.</p>\n<p>For example, creating a new <code>Intl.NumberFormat</code> object became around 24× faster.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/1oz8K5m7ve-713.avif 713w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/1oz8K5m7ve-713.webp 713w\"><img alt=\"Microbenchmarks testing the performance of creating various `Intl` objects\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/1oz8K5m7ve-713.svg\" width=\"713\" height=\"371\"></picture></p>\n<p>Note that for better performance, it’s recommended to explicitly create <em>and reuse</em> an <code>Intl.NumberFormat</code> or <code>Intl.DateTimeFormat</code> or <code>Intl.Collator</code> object, rather than calling methods like <code>toLocaleString</code> or <code>localeCompare</code>.</p>\n<h2 id=\"new-intl-features\" tabindex=\"-1\">New <code>Intl</code> features <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h2>\n<p>All of this work has provided a great foundation to build new features on and we’re continuing to ship all the new Internationalization proposals that are in Stage 3.</p>\n<p><a href=\"https://www.recompiled.dev/features/intl-relativetimeformat\"><code>Intl.RelativeTimeFormat</code></a> has shipped in Chrome 71, <a href=\"https://www.recompiled.dev/features/intl-listformat\"><code>Intl.ListFormat</code></a> has shipped in Chrome 72, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale\"><code>Intl.Locale</code></a> has shipped in Chrome 74, and <a href=\"https://github.com/tc39/proposal-intl-datetime-style\"><code>dateStyle</code> and <code>timeStyle</code> options for <code>Intl.DateTimeFormat</code></a> and <a href=\"https://github.com/tc39/ecma402/pull/236\">BigInt support for <code>Intl.DateTimeFormat</code></a> are shipping in Chrome 76. <a href=\"https://github.com/tc39/proposal-intl-DateTimeFormat-formatRange\"><code>Intl.DateTimeFormat#formatRange</code></a>, <a href=\"https://github.com/tc39/proposal-intl-segmenter/\"><code>Intl.Segmenter</code></a>, and <a href=\"https://github.com/tc39/proposal-unified-intl-numberformat/\">additional options for <code>Intl.NumberFormat</code></a> are currently under development in V8, and we hope to ship them soon!</p>\n<p>Many of these new APIs, and others further down the pipeline, are due to our work on standardizing new features to help developers with internationalization. <a href=\"https://github.com/tc39/proposal-intl-displaynames\"><code>Intl.DisplayNames</code></a> is a Stage 1 proposal that allows users to localize the display names of language, region or script display names. <a href=\"https://github.com/fabalbon/proposal-intl-DateTimeFormat-formatRange\"><code>Intl.DateTimeFormat#formatRange</code></a> is a Stage 3 proposal that specifies a way to format date ranges in a concise and locale-aware manner. <a href=\"https://github.com/tc39/proposal-unified-intl-numberformat\">The unified <code>Intl.NumberFormat</code> API proposal</a> is a Stage 3 proposal that improves <code>Intl.NumberFormat</code> by adding support for measurement units, currency and sign display policies, and scientific and compact notation. You can get involved in the future of ECMA-402 as well, by contributing at <a href=\"https://github.com/tc39/ecma402\">its GitHub repository</a>.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/intl/\">#</a></h2>\n<p><code>Intl</code> provides a feature-rich API for several operations needed in internationalizing your web app, leaving the heavy lifting to the browser, without shipping as much data or code over the wire. Thinking through the proper use of these APIs can lead your UI to work better in different locales. Due to the work by the Google V8 and i18n teams in collaboration with TC39 and its ECMA-402 subgroup, you can now access more functionality with better performance, and expect further improvements over time.</p>\n",
			"date_published": "2019-04-25T16:45:37Z"
		}
		,
		{
			"id": "https://www.recompiled.dev/blog/hash-code/",
			"url": "https://www.recompiled.dev/blog/hash-code/",
			"title": "Optimizing hash tables in V8",
			"content_html": "<div class=\"message-box\">\n\t<p><em>This post was originally published on the <a href=\"https://v8.dev/blog/hash-code\">V8 blog</a>.</em></p>\n</div>\n<p>ECMAScript 2015 introduced several new data structures such as Map, Set, WeakSet, and WeakMap, all of which use hash tables under the hood. This post details the <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6404\">recent improvements</a> in how <a href=\"https://www.recompiled.dev/blog/v8-release-63\">V8 v6.3+</a> stores the keys in hash tables.</p>\n<h2 id=\"hash-code\" tabindex=\"-1\">Hash code <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Hash_function\"><em>hash function</em></a> is used to map a given key to a location in the hash table. A <em>hash code</em> is the result of running this hash function over a given key.</p>\n<p>In V8, the hash code is just a random number, independent of the object value. Therefore, we can’t recompute it, meaning we must store it.</p>\n<p>For JavaScript objects that were used as keys, previously, the hash code was stored as a private symbol on the object. A private symbol in V8 is similar to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>, except that it’s not enumerable and doesn’t leak to userspace JavaScript.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">GetObjectHash</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span>hashCodeSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">IS_UNDEFINED</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\thash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">MathRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tkey<span class=\"token punctuation\">[</span>hashCodeSymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This worked well because we didn’t have to reserve memory for a hash code field until the object was added to a hash table, at which point a new private symbol was stored on the object.</p>\n<p>V8 could also optimize the hash code symbol lookup just like any other property lookup using the IC system, providing very fast lookups for the hash code. This works well for <a href=\"https://en.wikipedia.org/wiki/Inline_caching#Monomorphic_inline_caching\">monomorphic IC lookups</a>, when the keys have the same <a href=\"https://www.recompiled.dev/\">hidden class</a>. However, most real-world code doesn’t follow this pattern, and often keys have different hidden classes, leading to slow <a href=\"https://en.wikipedia.org/wiki/Inline_caching#Megamorphic_inline_caching\">megamorphic IC lookups</a> of the hash code.</p>\n<p>Another problem with the private symbol approach was that it triggered a <a href=\"https://www.recompiled.dev/#fast-property-access\">hidden class transition</a> in the key on storing the hash code. This resulted in poor polymorphic code not just for the hash code lookup but also for other property lookups on the key and <a href=\"https://floitsch.blogspot.com/2012/03/optimizing-for-v8-inlining.html\">deoptimization</a> from optimized code.</p>\n<h2 id=\"javascript-object-backing-stores\" tabindex=\"-1\">JavaScript object backing stores <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h2>\n<p>A JavaScript object (<code>JSObject</code>) in V8 uses two words (apart from its header): one word for storing a pointer to the elements backing store, and another word for storing a pointer to the properties backing store.</p>\n<p>The elements backing store is used for storing properties that look like <a href=\"https://tc39.es/ecma262/#sec-array-index\">array indices</a>, whereas the properties backing store is used for storing properties whose keys are strings or symbols. See this <a href=\"https://www.recompiled.dev/blog/fast-properties\">V8 blog post</a> by Camillo Bruni for more information about these backing stores.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← stored in elements</span>\nx<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← stored in properties</span></code></pre>\n<h2 id=\"hiding-the-hash-code\" tabindex=\"-1\">Hiding the hash code <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h2>\n<p>The easiest solution to storing the hash code would be to extend the size of a JavaScript object by one word and store the hash code directly on the object. However, this would waste memory for objects that aren’t added to a hash table. Instead, we could try to store the hash code in the elements store or properties store.</p>\n<p>The elements backing store is an array containing its length and all the elements. There’s not much to be done here, as storing the hashcode in a reserved slot (like the 0th index) would still waste memory when we don’t use the object as a key in a hash table.</p>\n<p>Let’s look at the properties backing store. There are two kinds of data structures used as a properties backing store: arrays and dictionaries.</p>\n<p>Unlike the array used in the elements backing store which does not have an upper limit, the array used in the properties backing store has an upper limit of 1022 values. V8 transitions to using a dictionary on exceeding this limit for performance reasons. (I’m slightly simplifying this — V8 can also use a dictionary in other cases, but there is a fixed upper limit on the number of values that can be stored in the array.)</p>\n<p>So, there are three possible states for the properties backing store:</p>\n<ol>\n<li>empty (no properties)</li>\n<li>array (can store up to 1022 values)</li>\n<li>dictionary</li>\n</ol>\n<p>Let’s discuss each of these.</p>\n<h3 id=\"the-properties-backing-store-is-empty\" tabindex=\"-1\">The properties backing store is empty <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h3>\n<p>For the empty case, we can directly store the hash code in this offset on the <code>JSObject</code>.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/wAsJyBpUBW-323.avif 323w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/wAsJyBpUBW-323.webp 323w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/wAsJyBpUBW-323.png\" width=\"323\" height=\"160\"></picture></p>\n<h3 id=\"the-properties-backing-store-is-an-array\" tabindex=\"-1\">The properties backing store is an array <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h3>\n<p>V8 represents integers less than 2<sup>31</sup> (on 32-bit systems) unboxed, as <a href=\"https://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations\">Smi</a>s. In a Smi, the least significant bit is a tag used to distinguish it from pointers, while the remaining 31 bits hold the actual integer value.</p>\n<p>Normally, arrays store their length as a Smi. Since we know that the maximum capacity of this array is only 1022, we only need 10 bits to store the length. We can use the remaining 21 bits to store the hash code!</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/DSYtSz1nW7-491.avif 491w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/DSYtSz1nW7-491.webp 491w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/DSYtSz1nW7-491.png\" width=\"491\" height=\"322\"></picture></p>\n<h3 id=\"the-properties-backing-store-is-a-dictionary\" tabindex=\"-1\">The properties backing store is a dictionary <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h3>\n<p>For the dictionary case, we increase the dictionary size by 1 word to store the hashcode in a dedicated slot at the beginning of the dictionary. We get away with potentially wasting a word of memory in this case, because the proportional increase in size isn’t as big as in the array case.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/YDT1jhWCfY-446.avif 446w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/YDT1jhWCfY-446.webp 446w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/YDT1jhWCfY-446.png\" width=\"446\" height=\"214\"></picture></p>\n<p>With these changes, the hash code lookup no longer has to go through the complex JavaScript property lookup machinery.</p>\n<h2 id=\"performance-improvements\" tabindex=\"-1\">Performance improvements <a class=\"header-anchor\" href=\"https://www.recompiled.dev/blog/hash-code/\">#</a></h2>\n<p>The <a href=\"https://github.com/kpdecker/six-speed\">SixSpeed</a> benchmark tracks the performance of Map and Set, and these changes resulted in a ~500% improvement.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/wEfBvRvGlO-1999.avif 1999w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/wEfBvRvGlO-1999.webp 1999w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/wEfBvRvGlO-1999.png\" width=\"1999\" height=\"386\"></picture></p>\n<p>This change caused a 5% improvement on the Basic benchmark in <a href=\"https://webkit.org/blog/7536/jsc-loves-es6/\">ARES6</a> as well.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/hskYCYhgJ4-1999.avif 1999w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/hskYCYhgJ4-1999.webp 1999w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/hskYCYhgJ4-1999.png\" width=\"1999\" height=\"505\"></picture></p>\n<p>This also resulted in an 18% improvement in one of the benchmarks in the <a href=\"http://emberperf.eviltrout.com/\">Emberperf</a> benchmark suite that tests Ember.js.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.recompiled.dev/img/KpLBt1XS4c-1987.avif 1987w\"><source type=\"image/webp\" srcset=\"https://www.recompiled.dev/img/KpLBt1XS4c-1987.webp 1987w\"><img alt=\"a graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.recompiled.dev/img/KpLBt1XS4c-1987.jpeg\" width=\"1987\" height=\"609\"></picture></p>\n",
			"date_published": "2018-01-29T13:33:37Z"
		}
		
	]
}
